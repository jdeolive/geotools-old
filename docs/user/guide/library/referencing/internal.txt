Internal
--------

Please note that this page is optional, only for the curious, as it covers some of the implementation classes.

A **CoordinateReferenceSystem** is an **gt-opengis** interface describing how a set of ordinates is to be interpreted as a three dimensional point. This definition is standardised, mathematical and generally not of interest unless something goes wrong.

For most cases you are only interested in using a CoordinateReferenceSystem as a parameter to a mathematical calculation (distance on along the surface of the earth and "re-projection" being the most common).

Creating a CoordinateReferenceSystem:

.. literalinclude:: /../src/main/java/org/geotools/referencing/ReferencingExamples.java
   :language: java
   :start-after: // createFromEPSGCode start
   :end-before: // createFromEPSGCode end

You will need to ensure GeoTools is configured with an appropriate plugin for this example to work. This plugin
will provide an CRSAuthorityFactory registered for "EPSG" codes.

Internally the **CRS** class makes use of a **CRSAuthorityFactory** to provide the definition for
the indicated code. You wish you can make use of the same facilities:

.. literalinclude:: /../src/main/java/org/geotools/referencing/ReferencingExamples.java
   :language: java
   :start-after: // createFromEPSGCode2 start
   :end-before: // createFromEPSGCode2 end

To create the actual **CoordinateReferenceSystem** objects a **CRSFactory** is used, for example when parsing
"well known text":

.. literalinclude:: /../src/main/java/org/geotools/referencing/ReferencingExamples.java
   :language: java
   :start-after: // creatCRSFromWKT start
   :end-before: // creatCRSFromWKT end

Where an example definition is::
  
  GEOGCS[
    "WGS 84",
    DATUM[
      "WGS_1984",
      SPHEROID["WGS 84",6378137,298.257223563,AUTHORITY["EPSG","7030"]],
      TOWGS84[0,0,0,0,0,0,0],
      AUTHORITY["EPSG","6326"]],
    PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],
    UNIT["DMSH",0.0174532925199433,AUTHORITY["EPSG","9108"]],
    AXIS["Lat",NORTH],
    AXIS["Long",EAST],
    AUTHORITY["EPSG","4326"]]

Internally this method makes use of CRSFactory.

CoordinateReferenceSystem Constants
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Some CoordinateReferenceSystem instances are used so often it is worth making static final constants for them. GeoTools has done so in order to cover the most common cases encountered when programming.

You can use the following math transform to convert from the common "long/lat" representation to three dimensions::
  
  MathTransform convert = CRS.findMathTransform( DefaultGeographicCRS.WGS84, DefaultGeocentricCRS.CARTESIAN);

Static final constant CoordinateReferenceSystem in GeoTools:

A coordinate reference system using the WGS84 datum as an approximation of the shape of the earth:

* DefaultGeographicCRS.WGS84 - this is the most commonly used default
* DefaultGeographicCRS.WGS84_3D

A 3D coordinate reference system with the origin at the approximate centre of mass of the earth:

* DefaultGeocentricCRS.CARTESIAN
* DefaultGeocentricCRS.SPHERICAL

A contextually local coordinate reference system (for construction projects or moving objects):

* DefaultEngineeringCRS.CARTESIAN_2D
* DefaultEngineeringCRS.CARTESIAN_3D
* DefaultEngineeringCRS.GENERIC_2D
* DefaultEngineeringCRS.GENERIC_3D

A 1D coordinate reference system used for recording heights or depth relative to the ellipsoidal datum:

* DefaultVirticalCRS.ELLIPSOIDAL_HEIGHT

For those into the details; these static final constant CoordinateReferenceSystem cite "GeoTools" as the authority responsible for the definition. This is in marked contrast with the **CoordinateReferenceSystem** instances produced by an AuthorityFactory (those instances will credit a specific organisation like "EPSG").

Here is an example:

.. literalinclude:: /../src/main/java/org/geotools/referencing/ReferencingExamples.java
   :language: java
   :start-after: // premadeObjects start
   :end-before: // premadeObjects end

Creating a CoordinateReferenceSystem
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

You can use factories defined by the referencing system to create things by hand using java code.

This example shows the creation of a WGS84 / UTM 10N CoordinateReferenceSystem:
  
.. literalinclude:: /../src/main/java/org/geotools/referencing/ReferencingExamples.java
   :language: java
   :start-after: // createCRSByHand1 start
   :end-before: // createCRSByHand1 end

The next example shows NAD 27 geographic CRS being defined, with a couple of interesting things to note:

* The datum factory automatically adds aliase names to the datum. 
  (The DatumAliasesTable.txt file inside gt-referencing has an entry for "North American Datum 1927").
* The toWGS84 information being supplied for use in a datum transform is added to the Datum

Here is the example:

.. literalinclude:: /../src/main/java/org/geotools/referencing/ReferencingExamples.java
   :language: java
   :start-after: // createCRSByHand2 start
   :end-before: // createCRSByHand2 end

Finally here is a no holds bard creation of a CoordianteReferenceSystem with all the usual helper classes
stripped away.  It does not use any of the static objects available in GeoTools. The following example
creates a CoordianteReferenceSystem to represent WGS84.

.. literalinclude:: /../src/main/java/org/geotools/referencing/ReferencingExamples.java
   :language: java
   :start-after: // createCRSByHand3 start
   :end-before: // createCRSByHand3 end

Referencing Factories
^^^^^^^^^^^^^^^^^^^^^

These are the "real" factories - interfaces that actually create stuff. These are all just gt-opengis interfaces, so you will need to use ReferencingFactoryFinder to get started:

* DatumFactory:
  Makes datums!
* CSFactory
  Makes CoordinateSystem instances, and many more
* CRSFactory
  Makes CoordinateReferenceSystem instances, and many more
* MathTransformFactory
  Makes MathTransform instances, and many more

You can quickly grab all four factories in one go using **ReferencingFactoryContainer**:

.. literalinclude:: /../src/main/java/org/geotools/referencing/ReferencingExamples.java
   :language: java
   :start-after: // factories start
   :end-before: // factories end

* ReferencingFactoryFinder
  
  As is custom we have included a "FactoryFinder" so you can look up a good
  implementation on the CLASSPATH.::
    
    DatumFactory datumFactory = ReferencingFactoryFinder.getDatumFactory(null);

  The ReferencingFactoryFinder returns a couple of GeoTools implementations right now, in
  the future we hope to replace these defaults with an implementation from JScience. 

* ReferencingFactoryContainer
  
  You may of noticed that to actually do anything you need several factories; we have
  gathered these together into a "container" for you - and the container has a few extra
  methods that use a couple of factories to gang up on a problem

  You can ReferencingFactoryContainer to use your own custom factory using hints
  as shown below:
  
  .. literalinclude:: /../src/main/java/org/geotools/referencing/ReferencingExamples.java
     :language: java
     :start-after: // referencingFactoryContainer start
     :end-before: // referencingFactoryContainer end
  
  Please note that this ReferencingFactoryContainer not strictly needed (it just makes things easier).
  ReferencingFactoryFinder will be smart and recycle instances if possible:
  
  .. literalinclude:: /../src/main/java/org/geotools/referencing/ReferencingExamples.java
     :language: java
     :start-after: // referencingFactoryContainer2 start
     :end-before: // referencingFactoryContainer2 end

Referencing Authority Factories
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Deep behind that CRS utility class is an amazing constellation of "factories" used to define what a CoordinateReferenceSystem is, actually create the parts and stitch them all together in a unified whole.

These things are factories in name only; their real job is to supply the definitions (in pattern speak they are considered builders).

* DatumAuthorityFactory:
  Defines a Datum using a code provided by a authority such as EPSG
* CSAuthorityFactory:
  Defines a CoordinateSystem using a code provided by an authority such as EPSG
* CRSAuthorityFactory:
  Defines a CoordinateReferenceSystem for a give authority (such as EPSG)
* CoordinateOperationAuthorityFactory:
  Defines coordinate operations from codes, backed by math transforms

To actually perform their function these authorities acquire a definition internally and then call a "real" factory class from ReferencingFactoryContainer.

* Getting the EPSG AuthorityFactory
  
  You can make direct use of the CRSAuthorityFactory configured to handle "EPSG" codes::
    
    CRSAuthorityFactory factory = ReferencingFactoryFinder.getCRSAuthorityFactory("EPSG", null);
    CoordinateReferenceSystem crs = factory.createCoordinateReferenceSystem("4326");

You will need to make sure that one of the **epsg** plugins is on your CLASSPATH (such as epsg-hsql).

* Finding the available EPSG Codes::
  
    CRSAuthorityFactory factory = ReferencingFactoryFinder.getCRSAuthorityFactory("EPSG", null);
    Set<String> authorityCodes = factory.getAuthorityCodes(CoordinateReferenceSystem.class);

* Getting Other AuthorityFactory Instances
  
  Here are several more examples that are understood by GeoTools::
    
    Hints hints = null; // Put optional hints here.
    CRSAuthorityFactory crsAuthority  = ReferencingFactoryFinder.getCRSAuthorityFactory("CRS",   hints);
    CRSAuthorityFactory wms2Authority = ReferencingFactoryFinder.getCRSAuthorityFactory("AUTO",  hints);
    CRSAuthorityFactory wms3Authority = ReferencingFactoryFinder.getCRSAuthorityFactory("AUTO2", hints);

* IdentifiedObject Finder for Controlled Searching
  
  One bit of functionality that is not available via the CRSAuthority interfaces directly
  is the ability to carefully search through all the available definitions.::
     
     CRSAuthorityFactory factory = ReferencingFactoryFinder.getCRSAuthorityFactory("EPSG", null);
     AbstractAuthorityFactory custom = (AbstractAuthorityFactory) factory;
     
     IdentifiedObjectFinder finder = custom.getIdentifiedObjectFinder(CoordinateReferenceSystem.class);
     
     finder.setFullScanAllowed(true); // will search everything ever defined (may be slow)
     IdentifiedObject find = finder.find(crs);

     finder.setFullScanAllowed(false); // will limit search to what has been cached in memory
     IdentifiedObject find = finder.find(crs);
  
  As shown above this is additional functionality made available through
  AbstractAuthorityFactory - it is not part of the normal opengis interfaces.

You can construct finders to search through other categories of referencing Objects (like Datum and ReferencingSystem).
